<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blackboard.dao.CommentDao">
	<!-- 目的：为dao接口方法提供sql语句配置 -->


	<select id="getAllComments" resultType="com.blackboard.dto.CommentDto"
		parameterType="map">
		SELECT
		a.*,count(tl.like_id) as likeCount,count(tll.like_id) as isLike
		from
		(
		select aa.*,count(tb.comment_id) as replyCount
		from 
		(select t.comment_id,t.blackboard_id,t.commenter_id,t.comment_content,t.comment_time,t.commenter_name
		FROM
		tb_comment t
		WHERE
		t.blackboard_id = #{blackboardId}
		AND t.status = 0
		AND t.reply_status = 0 )aa
		left join tb_comment tb 
		on aa.comment_id = tb.reply_comment_id
		and tb.status = 0
		GROUP BY aa.comment_id) a
		left join
		tb_like tl on a.comment_id = tl.Be_likedId
		and
		tl.status = 0
		left join 
		tb_like tll
		on tll.Be_likedId = a.comment_id
		and tll.like_useid = #{mobile}
		and tll.status = 0
		GROUP BY
		a.comment_id
		ORDER BY
		a.comment_time DESC
	</select>

    <update id="updateRead">
	UPDATE tb_comment 
	SET is_read = 1 
	WHERE
		blackboard_id IN ( SELECT blackboard_id FROM tb_blackboard WHERE create_mobile = #{mobile} AND enterprise_id = #{enterpriseId} ) 
		OR ( reply_id = #{mobile} AND enterprise_id = #{enterpriseId} ) 
		OR (
		reply_comment_id IN (
	SELECT
		t.comment_id 
	FROM
		( SELECT tc.comment_id FROM tb_comment tc WHERE tc.commenter_id = #{mobile} AND tc.enterprise_id = #{enterpriseId} ) t 
		) 
		)
    
    </update>

	<select id="selectCommentById" resultType="Comment"
		parameterType="String">
		SELECT
		comment_id,
		blackboard_id,
		enterprise_id,
		commenter_id,
		comment_content,
		comment_time,
		commenter_name,	
		reply_comment_id,
		reply_id,
		reply_name
		FROM
		tb_comment
		WHERE
		comment_id = #{commentId}
	</select>

	<select id="selectById" resultType="com.blackboard.dto.CommentDto"
		parameterType="map">
		SELECT a.*,count(tl.like_id) as likeCount,count(tll.like_id) as isLike
		FROM (
		SELECT 
		comment_id,
		blackboard_id,
		commenter_id,
		reply_comment_id,
		reply_id,
		comment_content,
		comment_time,
		reply_name,
		commenter_name
		FROM tb_comment 
		WHERE comment_id = #{commentId}) a
		LEFT JOIN 
		tb_like tl ON 
		a.comment_id = tl.Be_likedId
		AND tl.`status` = 0
		LEFT JOIN 
		tb_like tll ON 
		tll.Be_likedId = a.comment_id
		and tll.like_useid = #{mobile}
		and tll.`status` = 0
		GROUP BY a.comment_id
	</select>



	<select id="selectCount" parameterType="String" resultType="Integer">
		SELECT
		COUNT(*)
		FROM
		tb_comment
		WHERE
		blackboard_id = #{blackboardId}
		AND
		status = 0
	</select>

	<insert id="addComment" parameterType="Comment">
		INSERT INTO
		tb_comment
		(
			comment_id,
			blackboard_id,
			enterprise_id,
			commenter_id,
			comment_content,
			comment_time,
			commenter_name,
			status,
			reply_status,
			is_read
		)
		VALUES(
			#{commentId},
			#{blackboardId},
			#{enterpriseId},
			#{commenterId},
			#{commentContent,jdbcType=VARCHAR},
			now(),
			#{commenterName},
			0,
			0,
			0
		)
	</insert>

	<insert id="reply" parameterType="Comment">
		INSERT INTO
		tb_comment
		<trim prefix="(" suffix=")" suffixOverrides=",">
			comment_id,
			blackboard_id,
			enterprise_id,
			commenter_id,
			comment_content,
			comment_time,
			commenter_name,
			status,
			is_read,
			reply_status,
			reply_comment_id
		</trim>
		<trim prefix="values(" suffix=")" suffixOverrides=",">
			#{commentId},
			#{blackboardId},
			#{enterpriseId},
			#{commenterId},
			#{commentContent,jdbcType=VARCHAR},
			now(),
			#{commenterName},
			0,
			0,
			1,
			#{replyCommentId}
		</trim>
	</insert>

	<insert id="replyReply" parameterType="Comment">
		INSERT INTO
		tb_comment
		(
			comment_id,
			blackboard_id,
			enterprise_id,
			commenter_id,
			comment_content,
			comment_time,
			commenter_name,	
			status,
			is_read,
			reply_status,
			reply_comment_id,
			reply_id,
			reply_name)
		VALUES(
			#{commentId},
			#{blackboardId},
			#{enterpriseId},
			#{commenterId},
			#{commentContent,jdbcType=VARCHAR},
			now(),
			#{commenterName},
			0,
			0,
			2,
			#{replyCommentId},
			#{replyId},
			#{replyName}
		)
	</insert>


	<select id="getreply" parameterType="map" resultType="com.blackboard.dto.CommentDto">
		SELECT a.*,count(tl.like_id) as likeCount,count(tll.like_id) as islike
		FROM (
		SELECT 
		comment_id,
		blackboard_id,
		commenter_id,
		reply_comment_id,
		reply_id,
		comment_content,
		comment_time,
		reply_name,
		commenter_name
		FROM tb_comment 
		WHERE reply_comment_id = #{commentId} 
		AND status = 0
		<if test=" getreply == null">
		LIMIT 0,4
		</if>
		) a
		LEFT JOIN 
		tb_like tl ON 
		a.comment_id = tl.Be_likedId
		and tl.status = 0
		LEFT JOIN 
		tb_like tll ON 
		tll.Be_likedId = a.comment_id
		and tll.like_useid = #{mobile}
		and tll.status = 0	
		GROUP BY a.comment_id
		order by a.comment_time
	</select>

	<delete id="deleteComments" parameterType="map">
		DELETE FROM
		tb_comment
		WHERE
		enterprise_id = #{enterpriseId}
		AND
		blackboard_id = #{blackboardId}
	</delete>

	<update id="deleteOneComments" parameterType="String">
		update tb_comment
		set
		status = 1
		where comment_id = #{commentId}
		or reply_comment_id = #{commentId}
	</update>


	<update id="delectReply" parameterType="String">
		update tb_comment
		set
		status = 1
		where comment_id = #{commentId}
	</update>	
</mapper>